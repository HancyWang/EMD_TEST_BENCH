<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32F103RCT6\OBJ\STM32103RCT6.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32F103RCT6\OBJ\STM32103RCT6.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Mar 12 16:56:10 2019
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TaskDataSend &rArr; UartSendNBytes
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">CMD_ProcessTask</a> from comm_task.o(i.CMD_ProcessTask) referenced from app.o(i.init_task)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">EMD_PCB_test_task</a> from emd_pcb_test_task.o(i.EMD_PCB_test_task) referenced from app.o(i.init_task)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">TaskDataSend</a> from comm_task.o(i.TaskDataSend) referenced from app.o(i.init_task)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3c]">honeywell_sampling_data</a> from honeywell_sampling_data.o(i.honeywell_sampling_data) referenced from app.o(i.init_task)
 <LI><a href="#[3d]">init_task</a> from app.o(i.init_task) referenced from main.o(i.main)
 <LI><a href="#[3a]">key_check_task</a> from key_check_task.o(i.key_check_task) referenced from app.o(i.init_task)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[43]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleUnPackFrame
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleUnPackFrame
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDataSend
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[de]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>

<P><STRONG><a name="[73]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>

<P><STRONG><a name="[78]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>

<P><STRONG><a name="[76]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>

<P><STRONG><a name="[71]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>

<P><STRONG><a name="[72]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>

<P><STRONG><a name="[75]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>

<P><STRONG><a name="[79]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>

<P><STRONG><a name="[77]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>

<P><STRONG><a name="[a3]"></a>Buf2Read</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cmd_receive.o(i.Buf2Read))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleUnPackFrame
</UL>

<P><STRONG><a name="[ad]"></a>Buf2Write</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cmd_receive.o(i.Buf2Write))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CMD_ProcessTask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, comm_task.o(i.CMD_ProcessTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CMD_ProcessTask &rArr; ModuleUnPackFrame &rArr; ModuleProcessPacket &rArr; protocol_module_process &rArr; SendQuery2ForParameters &rArr; fifoWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleUnPackFrame
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay_ms
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.init_task)
</UL>
<P><STRONG><a name="[af]"></a>CalcCheckSum</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, comm_task.o(i.CalcCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalcCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQuery2ForParameters
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_get_sw_version
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQuery1ForParameters
</UL>

<P><STRONG><a name="[47]"></a>DISP_FNT12X24</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, display_module.o(i.DISP_FNT12X24))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DISP_FNT12X24 &rArr; LCD_CrtlWrite_Area &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite_Color
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CrtlWrite_Area
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[4b]"></a>DISP_FNT20X40</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, display_module.o(i.DISP_FNT20X40))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DISP_FNT20X40 &rArr; LCD_CrtlWrite_Area &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite_Color
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CrtlWrite_Area
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[70]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[6e]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[5e]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartReceiverResidualCnt
</UL>

<P><STRONG><a name="[6f]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, common.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendNak
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecByte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
</UL>

<P><STRONG><a name="[4f]"></a>EMD_PCB_operate_on</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, emd_pcb_test_task.o(i.EMD_PCB_operate_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EMD_PCB_operate_on &rArr; Set_PIN
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PIN
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shut_down_EMD_PCBA
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_power_on_EMD_PCBA
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[3b]"></a>EMD_PCB_test_task</STRONG> (Thumb, 1584 bytes, Stack size 8 bytes, emd_pcb_test_task.o(i.EMD_PCB_test_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = EMD_PCB_test_task &rArr; LCD_show_promt_info &rArr; display_module_show_string &rArr; display_module_show_str &rArr; LCD_ShowChar &rArr; DISP_FNT20X40 &rArr; LCD_CrtlWrite_Area &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_get_sw_version
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQuery1ForParameters
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_all_keys
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shut_down_EMD_PCBA
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_power_on_EMD_PCBA
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show_promt_info
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_timing_Xmillisec
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_gloable_var
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_operate_on
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_xmmHg_2_adc_value
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Freq_Dudy_Set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PIN
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_I2C
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay_ms
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.init_task)
</UL>
<P><STRONG><a name="[63]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_uConfiguration
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_IN
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_GPIO_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_VALVE
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_V1_V2
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_STOP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_START_KEY
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_START
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_NEXT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MODE_KEY
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LED
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_JDQ
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Error_LED
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BELL
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_task
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PIN
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_I2C
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PIN
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_I2C
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
</UL>

<P><STRONG><a name="[a2]"></a>GetBuf2Length</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cmd_receive.o(i.GetBuf2Length))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleUnPackFrame
</UL>

<P><STRONG><a name="[5d]"></a>GetUartReceiverResidualCnt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serial_port.o(i.GetUartReceiverResidualCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetUartReceiverResidualCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
</UL>

<P><STRONG><a name="[d2]"></a>Get_pressure_zero_point_from_EMD_PCB</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, protocol_module.o(i.Get_pressure_zero_point_from_EMD_PCB))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_module_process
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C_RecAck</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, i2c.o(i.I2C_RecAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_RecAck &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_IN
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_readByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_honeywell_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_honeywell_sensor
</UL>

<P><STRONG><a name="[62]"></a>I2C_RecByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, i2c.o(i.I2C_RecByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_RecByte &rArr; I2C_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_IN
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_readByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_honeywell_free
</UL>

<P><STRONG><a name="[60]"></a>I2C_SDA_IN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, i2c.o(i.I2C_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecByte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
</UL>

<P><STRONG><a name="[61]"></a>I2C_SDA_OUT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, i2c.o(i.I2C_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendNak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
</UL>

<P><STRONG><a name="[64]"></a>I2C_SendAck</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c.o(i.I2C_SendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_SendAck &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_readByte
</UL>

<P><STRONG><a name="[65]"></a>I2C_SendByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, i2c.o(i.I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_SendByte &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_readByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_honeywell_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_honeywell_sensor
</UL>

<P><STRONG><a name="[66]"></a>I2C_SendNak</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c.o(i.I2C_SendNak))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_SendNak &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_readByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_honeywell_free
</UL>

<P><STRONG><a name="[67]"></a>I2C_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i2c.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Start &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_readByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_honeywell_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_honeywell_sensor
</UL>

<P><STRONG><a name="[68]"></a>I2C_Stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2c.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Stop &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_readByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_honeywell_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_honeywell_sensor
</UL>

<P><STRONG><a name="[69]"></a>I2C_uConfiguration</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, i2c.o(i.I2C_uConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_uConfiguration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_honeywell_sensor
</UL>

<P><STRONG><a name="[6b]"></a>Init_ADC1</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, hardware.o(i.Init_ADC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Init_ADC1 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[7a]"></a>Init_BELL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware.o(i.Init_BELL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_BELL &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[7b]"></a>Init_Error_LED</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware.o(i.Init_Error_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Error_LED &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[7c]"></a>Init_I2C</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hardware.o(i.Init_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_I2C &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[7f]"></a>Init_JDQ</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hardware.o(i.Init_JDQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_JDQ &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[80]"></a>Init_LCD</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, hardware.o(i.Init_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_LCD &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[81]"></a>Init_LED</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware.o(i.Init_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_LED &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[82]"></a>Init_MODE_KEY</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardware.o(i.Init_MODE_KEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_MODE_KEY &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[83]"></a>Init_Motor_PWM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor_pwm.o(i.Init_Motor_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Init_Motor_PWM &rArr; Motor_PWM_Config &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_GPIO_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[86]"></a>Init_NEXT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware.o(i.Init_NEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_NEXT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[8d]"></a>Init_Receive</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cmd_receive.o(i.Init_Receive))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART_Comm_with_PCBA
</UL>

<P><STRONG><a name="[87]"></a>Init_START</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware.o(i.Init_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_START &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[88]"></a>Init_START_KEY</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardware.o(i.Init_START_KEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_START_KEY &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[89]"></a>Init_STOP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware.o(i.Init_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_STOP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[8a]"></a>Init_UART_Comm_with_PCBA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware.o(i.Init_UART_Comm_with_PCBA))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Init_UART_Comm_with_PCBA &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[8e]"></a>Init_V1_V2</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hardware.o(i.Init_V1_V2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_V1_V2 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[8f]"></a>Init_VALVE</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardware.o(i.Init_VALVE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_VALVE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[55]"></a>Init_all_keys</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, key_check_task.o(i.Init_all_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Init_all_keys
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_key_stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_key_start
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_key_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[54]"></a>Init_gloable_var</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, emd_pcb_test_task.o(i.Init_gloable_var))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[93]"></a>Init_honeywell_sensor</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, i2c.o(i.Init_honeywell_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Init_honeywell_sensor &rArr; I2C_Start &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_uConfiguration
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_sampling_data
</UL>

<P><STRONG><a name="[92]"></a>Init_key_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, key_check_task.o(i.Init_key_next))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_all_keys
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_task
</UL>

<P><STRONG><a name="[91]"></a>Init_key_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, key_check_task.o(i.Init_key_start))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_all_keys
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_task
</UL>

<P><STRONG><a name="[90]"></a>Init_key_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, key_check_task.o(i.Init_key_stop))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_all_keys
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_task
</UL>

<P><STRONG><a name="[94]"></a>Is_honeywell_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c.o(i.Is_honeywell_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Is_honeywell_free &rArr; I2C_RecByte &rArr; I2C_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendNak
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecByte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_sampling_data
</UL>

<P><STRONG><a name="[d0]"></a>Is_the_para_frame1_right</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, protocol_module.o(i.Is_the_para_frame1_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Is_the_para_frame1_right
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_module_process
</UL>

<P><STRONG><a name="[d1]"></a>Is_the_para_frame2_right</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, protocol_module.o(i.Is_the_para_frame2_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Is_the_para_frame2_right
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_module_process
</UL>

<P><STRONG><a name="[cf]"></a>Is_the_sw_version_right</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, protocol_module.o(i.Is_the_sw_version_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Is_the_sw_version_right
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_module_process
</UL>

<P><STRONG><a name="[58]"></a>Is_timing_Xmillisec</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, emd_pcb_test_task.o(i.Is_timing_Xmillisec))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[98]"></a>LCD_Initial</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, lcd.o(i.LCD_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Initial &rArr; SdData
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[53]"></a>LCD_show_promt_info</STRONG> (Thumb, 2368 bytes, Stack size 24 bytes, emd_pcb_test_task.o(i.LCD_show_promt_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = LCD_show_promt_info &rArr; display_module_show_string &rArr; display_module_show_str &rArr; LCD_ShowChar &rArr; DISP_FNT20X40 &rArr; LCD_CrtlWrite_Area &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_module_show_string
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shut_down_EMD_PCBA
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_backlight
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_rect_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Motor_PWM_Freq_Dudy_Set</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, motor_pwm.o(i.Motor_PWM_Freq_Dudy_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Motor_PWM_Freq_Dudy_Set &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tim
</UL>

<P><STRONG><a name="[ae]"></a>OLED_WR_Byte</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lcd.o(i.OLED_WR_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_crtl_write_area
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCmd
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>

<P><STRONG><a name="[6d]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[ac]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_GPIO_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tim
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[6a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_uConfiguration
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_GPIO_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[bc]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[c8]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tim
</UL>

<P><STRONG><a name="[44]"></a>ReceiveData</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, cmd_receive.o(i.ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReceiveData &rArr; GetUartReceiverResidualCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartReceiverResidualCnt
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf2Write
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ProcessTask
</UL>

<P><STRONG><a name="[52]"></a>Reset_I2C</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware.o(i.Reset_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reset_I2C
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>SdCmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd.o(i.SdCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initial
</UL>

<P><STRONG><a name="[9a]"></a>SdData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd.o(i.SdData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdData
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initial
</UL>

<P><STRONG><a name="[59]"></a>SendQuery1ForParameters</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, protocol_module.o(i.SendQuery1ForParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SendQuery1ForParameters &rArr; fifoWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCheckSum
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[b1]"></a>SendQuery2ForParameters</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, protocol_module.o(i.SendQuery2ForParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SendQuery2ForParameters &rArr; fifoWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCheckSum
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_module_process
</UL>

<P><STRONG><a name="[50]"></a>Set_PIN</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, hardware.o(i.Set_PIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_PIN
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_power_on_EMD_PCBA
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_operate_on
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[bf]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_isr_ticks
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Config
</UL>

<P><STRONG><a name="[ca]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tim
</UL>

<P><STRONG><a name="[b6]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tim
</UL>

<P><STRONG><a name="[b4]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tim
</UL>

<P><STRONG><a name="[a8]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Freq_Dudy_Set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Config
</UL>

<P><STRONG><a name="[a9]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Freq_Dudy_Set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Config
</UL>

<P><STRONG><a name="[a7]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Freq_Dudy_Set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tim
</UL>

<P><STRONG><a name="[38]"></a>TaskDataSend</STRONG> (Thumb, 50 bytes, Stack size 312 bytes, comm_task.o(i.TaskDataSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = TaskDataSend &rArr; UartSendNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay_ms
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendNBytes
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoReadData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.init_task)
</UL>
<P><STRONG><a name="[8c]"></a>UARTInit</STRONG> (Thumb, 270 bytes, Stack size 80 bytes, serial_port.o(i.UARTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART_Comm_with_PCBA
</UL>

<P><STRONG><a name="[bb]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[b9]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[ba]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[b8]"></a>UartSendNBytes</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, serial_port.o(i.UartSendNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartSendNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ReWorkCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDataSend
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9f]"></a>beep</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, emd_pcb_test_task.o(i.beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = beep &rArr; Set_PIN
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PIN
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show_promt_info
</UL>

<P><STRONG><a name="[be]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>delay_ms</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shut_down_EMD_PCBA
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_power_on_EMD_PCBA
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_operate_on
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleUnPackFrame
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initial
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_I2C
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
</UL>

<P><STRONG><a name="[4e]"></a>delay_us</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[c0]"></a>display_module_show_str</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, display_module.o(i.display_module_show_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = display_module_show_str &rArr; LCD_ShowChar &rArr; DISP_FNT20X40 &rArr; LCD_CrtlWrite_Area &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_module_show_string
</UL>

<P><STRONG><a name="[9c]"></a>display_module_show_string</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, display_module.o(i.display_module_show_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = display_module_show_string &rArr; display_module_show_str &rArr; LCD_ShowChar &rArr; DISP_FNT20X40 &rArr; LCD_CrtlWrite_Area &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_module_show_str
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show_promt_info
</UL>

<P><STRONG><a name="[8b]"></a>fifoInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fifo.o(i.fifoInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART_Comm_with_PCBA
</UL>

<P><STRONG><a name="[b7]"></a>fifoReadData</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, fifo.o(i.fifoReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fifoReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDataSend
</UL>

<P><STRONG><a name="[b0]"></a>fifoWriteData</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, fifo.o(i.fifoWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fifoWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQuery2ForParameters
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_get_sw_version
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQuery1ForParameters
</UL>

<P><STRONG><a name="[c1]"></a>honeywell_readByte</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, i2c.o(i.honeywell_readByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = honeywell_readByte &rArr; I2C_RecByte &rArr; I2C_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendNak
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecByte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecAck
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_sampling_data
</UL>

<P><STRONG><a name="[3c]"></a>honeywell_sampling_data</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, honeywell_sampling_data.o(i.honeywell_sampling_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = honeywell_sampling_data &rArr; honeywell_readByte &rArr; I2C_RecByte &rArr; I2C_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_readByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_honeywell_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_honeywell_sensor
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.init_task)
</UL>
<P><STRONG><a name="[c2]"></a>init_hardware</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, hardware.o(i.init_hardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = init_hardware &rArr; Init_UART_Comm_with_PCBA &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lang
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motor_PWM
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PIN
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_VALVE
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_V1_V2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART_Comm_with_PCBA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_STOP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_START_KEY
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_START
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_NEXT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MODE_KEY
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LED
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_JDQ
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Error_LED
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BELL
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task
</UL>

<P><STRONG><a name="[c4]"></a>init_lang</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lang.o(i.init_lang))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[c3]"></a>init_lcd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd.o(i.init_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_lcd &rArr; lcd_draw_rect_real &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_rect_real
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[3d]"></a>init_task</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app.o(i.init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = init_task &rArr; init_hardware &rArr; Init_UART_Comm_with_PCBA &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pend_task
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c7]"></a>init_tim</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hardware.o(i.init_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_tim &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[3a]"></a>key_check_task</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, key_check_task.o(i.key_check_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_check_task &rArr; os_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_key_stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_key_start
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_key_next
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.init_task)
</UL>
<P><STRONG><a name="[95]"></a>lcd_crtl_write_area</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, lcd.o(i.lcd_crtl_write_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_rect_real
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CrtlWrite_Area
</UL>

<P><STRONG><a name="[96]"></a>lcd_ctrl_write_color</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lcd.o(i.lcd_ctrl_write_color))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_rect_real
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite_Color
</UL>

<P><STRONG><a name="[97]"></a>lcd_draw_point</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lcd.o(i.lcd_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_draw_point
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_write_color
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[9d]"></a>lcd_draw_rect_real</STRONG> (Thumb, 70 bytes, Stack size 36 bytes, lcd.o(i.lcd_draw_rect_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_draw_rect_real &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_write_color
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_crtl_write_area
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show_promt_info
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = main &rArr; os_init &rArr; init_tim &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_create_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c5]"></a>os_create_task</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_core.o(i.os_create_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_create_task
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>os_delay_ms</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, os_core.o(i.os_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_task
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;honeywell_sampling_data
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDataSend
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ProcessTask
</UL>

<P><STRONG><a name="[cd]"></a>os_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_core.o(i.os_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_init &rArr; init_tim &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tim
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>os_isr_ticks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_core.o(i.os_isr_ticks))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>os_pend_task</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_core.o(i.os_pend_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_pend_task
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task
</UL>

<P><STRONG><a name="[ce]"></a>os_start</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, os_core.o(i.os_start))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>protocol_module_process</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, protocol_module.o(i.protocol_module_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = protocol_module_process &rArr; SendQuery2ForParameters &rArr; fifoWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQuery2ForParameters
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_the_sw_version_right
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_the_para_frame2_right
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_the_para_frame1_right
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_pressure_zero_point_from_EMD_PCB
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleProcessPacket
</UL>

<P><STRONG><a name="[5c]"></a>re_power_on_EMD_PCBA</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, emd_pcb_test_task.o(i.re_power_on_EMD_PCBA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = re_power_on_EMD_PCBA &rArr; EMD_PCB_operate_on &rArr; Set_PIN
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_operate_on
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PIN
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[56]"></a>send_get_sw_version</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, protocol_module.o(i.send_get_sw_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = send_get_sw_version &rArr; fifoWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCheckSum
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[9e]"></a>set_lcd_backlight</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.set_lcd_backlight))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show_promt_info
</UL>

<P><STRONG><a name="[57]"></a>shut_down_EMD_PCBA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, emd_pcb_test_task.o(i.shut_down_EMD_PCBA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shut_down_EMD_PCBA &rArr; EMD_PCB_operate_on &rArr; Set_PIN
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_operate_on
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_show_promt_info
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>

<P><STRONG><a name="[5b]"></a>trans_xmmHg_2_adc_value</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, honeywell_sampling_data.o(i.trans_xmmHg_2_adc_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trans_xmmHg_2_adc_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMD_PCB_test_task
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bd]"></a>DMA_ReWorkCfg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, serial_port.o(i.DMA_ReWorkCfg))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendNBytes
</UL>

<P><STRONG><a name="[85]"></a>Motor_PWM_Config</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, motor_pwm.o(i.Motor_PWM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Motor_PWM_Config &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motor_PWM
</UL>

<P><STRONG><a name="[84]"></a>Motor_PWM_GPIO_Config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, motor_pwm.o(i.Motor_PWM_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_PWM_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motor_PWM
</UL>

<P><STRONG><a name="[a4]"></a>CheckCheckSum</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, comm_task.o(i.CheckCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleUnPackFrame
</UL>

<P><STRONG><a name="[a0]"></a>ModuleProcessPacket</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comm_task.o(i.ModuleProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ModuleProcessPacket &rArr; protocol_module_process &rArr; SendQuery2ForParameters &rArr; fifoWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_module_process
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleUnPackFrame
</UL>

<P><STRONG><a name="[45]"></a>ModuleUnPackFrame</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, comm_task.o(i.ModuleUnPackFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ModuleUnPackFrame &rArr; ModuleProcessPacket &rArr; protocol_module_process &rArr; SendQuery2ForParameters &rArr; fifoWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleProcessPacket
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCheckSum
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuf2Length
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf2Read
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ProcessTask
</UL>

<P><STRONG><a name="[b2]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b3]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[4c]"></a>DISP_FNT8X16</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, display_module.o(i.DISP_FNT8X16))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DISP_FNT8X16 &rArr; LCD_CrtlWrite_Area &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite_Color
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CrtlWrite_Area
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[48]"></a>LCD_CrtlWrite_Area</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, display_module.o(i.LCD_CrtlWrite_Area))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_CrtlWrite_Area &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_crtl_write_area
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT20X40
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT12X24
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT8X16
</UL>

<P><STRONG><a name="[49]"></a>LCD_CtrlWrite_Color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, display_module.o(i.LCD_CtrlWrite_Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_CtrlWrite_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_write_color
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT20X40
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT12X24
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT8X16
</UL>

<P><STRONG><a name="[4a]"></a>LCD_DrawPoint</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, display_module.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_DrawPoint &rArr; lcd_draw_point
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT20X40
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT12X24
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT8X16
</UL>

<P><STRONG><a name="[9b]"></a>LCD_ShowChar</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, display_module.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_ShowChar &rArr; DISP_FNT20X40 &rArr; LCD_CrtlWrite_Area &rArr; lcd_crtl_write_area
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT20X40
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT12X24
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_FNT8X16
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_module_show_str
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
